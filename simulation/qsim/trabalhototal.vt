// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/03/2015 10:49:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decod_hamming
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod_hamming_vlg_sample_tst(
	entrada_dec,
	sampler_tx
);
input [0:6] entrada_dec;
output sampler_tx;

reg sample;
time current_time;
always @(entrada_dec)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decod_hamming_vlg_check_tst (
	LED,
	n_corrigido,
	saida_corrigido,
	saida_posicao,
	saida_recebido,
	sampler_rx
);
input  LED;
input [0:6] n_corrigido;
input [0:3] saida_corrigido;
input [0:2] saida_posicao;
input [0:3] saida_recebido;
input sampler_rx;

reg  LED_expected;
reg [0:6] n_corrigido_expected;
reg [0:3] saida_corrigido_expected;
reg [0:2] saida_posicao_expected;
reg [0:3] saida_recebido_expected;

reg  LED_prev;
reg [0:6] n_corrigido_prev;
reg [0:3] saida_corrigido_prev;
reg [0:2] saida_posicao_prev;
reg [0:3] saida_recebido_prev;

reg  LED_expected_prev;
reg [0:6] n_corrigido_expected_prev;
reg [0:3] saida_corrigido_expected_prev;
reg [0:2] saida_posicao_expected_prev;
reg [0:3] saida_recebido_expected_prev;

reg  last_LED_exp;
reg [0:6] last_n_corrigido_exp;
reg [0:3] last_saida_corrigido_exp;
reg [0:2] last_saida_posicao_exp;
reg [0:3] last_saida_recebido_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED_prev = LED;
	n_corrigido_prev = n_corrigido;
	saida_corrigido_prev = saida_corrigido;
	saida_posicao_prev = saida_posicao;
	saida_recebido_prev = saida_recebido;
end

// update expected /o prevs

always @(trigger)
begin
	LED_expected_prev = LED_expected;
	n_corrigido_expected_prev = n_corrigido_expected;
	saida_corrigido_expected_prev = saida_corrigido_expected;
	saida_posicao_expected_prev = saida_posicao_expected;
	saida_recebido_expected_prev = saida_recebido_expected;
end



// expected LED
initial
begin
	LED_expected = 1'bX;
end 
// expected n_corrigido[ 6 ]
initial
begin
	n_corrigido_expected[6] = 1'bX;
end 
// expected n_corrigido[ 5 ]
initial
begin
	n_corrigido_expected[5] = 1'bX;
end 
// expected n_corrigido[ 4 ]
initial
begin
	n_corrigido_expected[4] = 1'bX;
end 
// expected n_corrigido[ 3 ]
initial
begin
	n_corrigido_expected[3] = 1'bX;
end 
// expected n_corrigido[ 2 ]
initial
begin
	n_corrigido_expected[2] = 1'bX;
end 
// expected n_corrigido[ 1 ]
initial
begin
	n_corrigido_expected[1] = 1'bX;
end 
// expected n_corrigido[ 0 ]
initial
begin
	n_corrigido_expected[0] = 1'bX;
end 
// expected saida_corrigido[ 3 ]
initial
begin
	saida_corrigido_expected[3] = 1'bX;
end 
// expected saida_corrigido[ 2 ]
initial
begin
	saida_corrigido_expected[2] = 1'bX;
end 
// expected saida_corrigido[ 1 ]
initial
begin
	saida_corrigido_expected[1] = 1'bX;
end 
// expected saida_corrigido[ 0 ]
initial
begin
	saida_corrigido_expected[0] = 1'bX;
end 
// expected saida_posicao[ 2 ]
initial
begin
	saida_posicao_expected[2] = 1'bX;
end 
// expected saida_posicao[ 1 ]
initial
begin
	saida_posicao_expected[1] = 1'bX;
end 
// expected saida_posicao[ 0 ]
initial
begin
	saida_posicao_expected[0] = 1'bX;
end 
// expected saida_recebido[ 3 ]
initial
begin
	saida_recebido_expected[3] = 1'bX;
end 
// expected saida_recebido[ 2 ]
initial
begin
	saida_recebido_expected[2] = 1'bX;
end 
// expected saida_recebido[ 1 ]
initial
begin
	saida_recebido_expected[1] = 1'bX;
end 
// expected saida_recebido[ 0 ]
initial
begin
	saida_recebido_expected[0] = 1'bX;
end 
// generate trigger
always @(LED_expected or LED or n_corrigido_expected or n_corrigido or saida_corrigido_expected or saida_corrigido or saida_posicao_expected or saida_posicao or saida_recebido_expected or saida_recebido)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED = %b | expected n_corrigido = %b | expected saida_corrigido = %b | expected saida_posicao = %b | expected saida_recebido = %b | ",LED_expected_prev,n_corrigido_expected_prev,saida_corrigido_expected_prev,saida_posicao_expected_prev,saida_recebido_expected_prev);
	$display("| real LED = %b | real n_corrigido = %b | real saida_corrigido = %b | real saida_posicao = %b | real saida_recebido = %b | ",LED_prev,n_corrigido_prev,saida_corrigido_prev,saida_posicao_prev,saida_recebido_prev);
`endif
	if (
		( LED_expected_prev !== 1'bx ) && ( LED_prev !== LED_expected_prev )
		&& ((LED_expected_prev !== last_LED_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp = LED_expected_prev;
	end
	if (
		( n_corrigido_expected_prev[0] !== 1'bx ) && ( n_corrigido_prev[0] !== n_corrigido_expected_prev[0] )
		&& ((n_corrigido_expected_prev[0] !== last_n_corrigido_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[0] = n_corrigido_expected_prev[0];
	end
	if (
		( n_corrigido_expected_prev[1] !== 1'bx ) && ( n_corrigido_prev[1] !== n_corrigido_expected_prev[1] )
		&& ((n_corrigido_expected_prev[1] !== last_n_corrigido_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[1] = n_corrigido_expected_prev[1];
	end
	if (
		( n_corrigido_expected_prev[2] !== 1'bx ) && ( n_corrigido_prev[2] !== n_corrigido_expected_prev[2] )
		&& ((n_corrigido_expected_prev[2] !== last_n_corrigido_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[2] = n_corrigido_expected_prev[2];
	end
	if (
		( n_corrigido_expected_prev[3] !== 1'bx ) && ( n_corrigido_prev[3] !== n_corrigido_expected_prev[3] )
		&& ((n_corrigido_expected_prev[3] !== last_n_corrigido_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[3] = n_corrigido_expected_prev[3];
	end
	if (
		( n_corrigido_expected_prev[4] !== 1'bx ) && ( n_corrigido_prev[4] !== n_corrigido_expected_prev[4] )
		&& ((n_corrigido_expected_prev[4] !== last_n_corrigido_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[4] = n_corrigido_expected_prev[4];
	end
	if (
		( n_corrigido_expected_prev[5] !== 1'bx ) && ( n_corrigido_prev[5] !== n_corrigido_expected_prev[5] )
		&& ((n_corrigido_expected_prev[5] !== last_n_corrigido_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[5] = n_corrigido_expected_prev[5];
	end
	if (
		( n_corrigido_expected_prev[6] !== 1'bx ) && ( n_corrigido_prev[6] !== n_corrigido_expected_prev[6] )
		&& ((n_corrigido_expected_prev[6] !== last_n_corrigido_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_corrigido[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_corrigido_expected_prev);
		$display ("     Real value = %b", n_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_corrigido_exp[6] = n_corrigido_expected_prev[6];
	end
	if (
		( saida_corrigido_expected_prev[0] !== 1'bx ) && ( saida_corrigido_prev[0] !== saida_corrigido_expected_prev[0] )
		&& ((saida_corrigido_expected_prev[0] !== last_saida_corrigido_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_corrigido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_corrigido_expected_prev);
		$display ("     Real value = %b", saida_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_corrigido_exp[0] = saida_corrigido_expected_prev[0];
	end
	if (
		( saida_corrigido_expected_prev[1] !== 1'bx ) && ( saida_corrigido_prev[1] !== saida_corrigido_expected_prev[1] )
		&& ((saida_corrigido_expected_prev[1] !== last_saida_corrigido_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_corrigido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_corrigido_expected_prev);
		$display ("     Real value = %b", saida_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_corrigido_exp[1] = saida_corrigido_expected_prev[1];
	end
	if (
		( saida_corrigido_expected_prev[2] !== 1'bx ) && ( saida_corrigido_prev[2] !== saida_corrigido_expected_prev[2] )
		&& ((saida_corrigido_expected_prev[2] !== last_saida_corrigido_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_corrigido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_corrigido_expected_prev);
		$display ("     Real value = %b", saida_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_corrigido_exp[2] = saida_corrigido_expected_prev[2];
	end
	if (
		( saida_corrigido_expected_prev[3] !== 1'bx ) && ( saida_corrigido_prev[3] !== saida_corrigido_expected_prev[3] )
		&& ((saida_corrigido_expected_prev[3] !== last_saida_corrigido_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_corrigido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_corrigido_expected_prev);
		$display ("     Real value = %b", saida_corrigido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_corrigido_exp[3] = saida_corrigido_expected_prev[3];
	end
	if (
		( saida_posicao_expected_prev[0] !== 1'bx ) && ( saida_posicao_prev[0] !== saida_posicao_expected_prev[0] )
		&& ((saida_posicao_expected_prev[0] !== last_saida_posicao_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_posicao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_posicao_expected_prev);
		$display ("     Real value = %b", saida_posicao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_posicao_exp[0] = saida_posicao_expected_prev[0];
	end
	if (
		( saida_posicao_expected_prev[1] !== 1'bx ) && ( saida_posicao_prev[1] !== saida_posicao_expected_prev[1] )
		&& ((saida_posicao_expected_prev[1] !== last_saida_posicao_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_posicao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_posicao_expected_prev);
		$display ("     Real value = %b", saida_posicao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_posicao_exp[1] = saida_posicao_expected_prev[1];
	end
	if (
		( saida_posicao_expected_prev[2] !== 1'bx ) && ( saida_posicao_prev[2] !== saida_posicao_expected_prev[2] )
		&& ((saida_posicao_expected_prev[2] !== last_saida_posicao_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_posicao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_posicao_expected_prev);
		$display ("     Real value = %b", saida_posicao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_posicao_exp[2] = saida_posicao_expected_prev[2];
	end
	if (
		( saida_recebido_expected_prev[0] !== 1'bx ) && ( saida_recebido_prev[0] !== saida_recebido_expected_prev[0] )
		&& ((saida_recebido_expected_prev[0] !== last_saida_recebido_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_recebido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_recebido_expected_prev);
		$display ("     Real value = %b", saida_recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_recebido_exp[0] = saida_recebido_expected_prev[0];
	end
	if (
		( saida_recebido_expected_prev[1] !== 1'bx ) && ( saida_recebido_prev[1] !== saida_recebido_expected_prev[1] )
		&& ((saida_recebido_expected_prev[1] !== last_saida_recebido_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_recebido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_recebido_expected_prev);
		$display ("     Real value = %b", saida_recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_recebido_exp[1] = saida_recebido_expected_prev[1];
	end
	if (
		( saida_recebido_expected_prev[2] !== 1'bx ) && ( saida_recebido_prev[2] !== saida_recebido_expected_prev[2] )
		&& ((saida_recebido_expected_prev[2] !== last_saida_recebido_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_recebido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_recebido_expected_prev);
		$display ("     Real value = %b", saida_recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_recebido_exp[2] = saida_recebido_expected_prev[2];
	end
	if (
		( saida_recebido_expected_prev[3] !== 1'bx ) && ( saida_recebido_prev[3] !== saida_recebido_expected_prev[3] )
		&& ((saida_recebido_expected_prev[3] !== last_saida_recebido_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_recebido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_recebido_expected_prev);
		$display ("     Real value = %b", saida_recebido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_recebido_exp[3] = saida_recebido_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decod_hamming_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:6] entrada_dec;
// wires                                               
wire LED;
wire [0:6] n_corrigido;
wire [0:3] saida_corrigido;
wire [0:2] saida_posicao;
wire [0:3] saida_recebido;

wire sampler;                             

// assign statements (if any)                          
decod_hamming i1 (
// port map - connection between master ports and signals/registers   
	.entrada_dec(entrada_dec),
	.LED(LED),
	.n_corrigido(n_corrigido),
	.saida_corrigido(saida_corrigido),
	.saida_posicao(saida_posicao),
	.saida_recebido(saida_recebido)
);
// entrada_dec[ 6 ]
initial
begin
	entrada_dec[6] = 1'b1;
end 
// entrada_dec[ 5 ]
initial
begin
	entrada_dec[5] = 1'b1;
end 
// entrada_dec[ 4 ]
initial
begin
	entrada_dec[4] = 1'b0;
end 
// entrada_dec[ 3 ]
initial
begin
	entrada_dec[3] = 1'b0;
end 
// entrada_dec[ 2 ]
initial
begin
	entrada_dec[2] = 1'b1;
end 
// entrada_dec[ 1 ]
initial
begin
	entrada_dec[1] = 1'b0;
end 
// entrada_dec[ 0 ]
initial
begin
	entrada_dec[0] = 1'b1;
end 

decod_hamming_vlg_sample_tst tb_sample (
	.entrada_dec(entrada_dec),
	.sampler_tx(sampler)
);

decod_hamming_vlg_check_tst tb_out(
	.LED(LED),
	.n_corrigido(n_corrigido),
	.saida_corrigido(saida_corrigido),
	.saida_posicao(saida_posicao),
	.saida_recebido(saida_recebido),
	.sampler_rx(sampler)
);
endmodule

